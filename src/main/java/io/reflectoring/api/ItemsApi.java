/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reflectoring.api;

import io.reflectoring.model.InlineResponse200;
import io.reflectoring.model.ItemStatus;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import javax.validation.Valid;
import javax.validation.constraints.*;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-09-10T17:37:19.958+02:00[Europe/Berlin]")

@Validated
@Api(value = "items", description = "the items API")
public interface ItemsApi {

    default ItemsApiDelegate getDelegate() {
        return new ItemsApiDelegate() {};
    }

    /**
     * GET /items
     * Recupera una lista di oggetti dallo store
     *
     * @param limit  (optional, default to 10)
     * @param cursor  (optional)
     * @return Una lista di oggetti presenti nello store (status code 200)
     */
    @ApiOperation(value = "", nickname = "apiGetItems", notes = "Recupera una lista di oggetti dallo store", response = InlineResponse200.class, tags={  })
    @ApiResponses(value = { 
        @ApiResponse(code = 200, message = "Una lista di oggetti presenti nello store", response = InlineResponse200.class) })
    @RequestMapping(value = "/items",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> apiGetItems(@Min(1) @Max(100) @ApiParam(value = "", defaultValue = "10") @Valid @RequestParam(value = "limit", required = false, defaultValue="10") Integer limit,@ApiParam(value = "") @Valid @RequestParam(value = "cursor", required = false) UUID cursor) {
        return getDelegate().apiGetItems(limit, cursor);
    }


    /**
     * POST /items : Inserisce un oggetto nello store
     * Inserisce un oggetto nello store 
     *
     * @param body  (required)
     * @return Bad Request (status code 400)
     *         or Too many requests (status code 429)
     *         or Service Unavailable (status code 503)
     *         or L&#39;oggetto è stato aggiunto correttamente nello store Il percorso dell&#39;oggetto viene ritornato nell&#39;header &#x60;Location&#x60;  (status code 201)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "Inserisce un oggetto nello store", nickname = "apiPostItems", notes = "Inserisce un oggetto nello store ", response = ItemStatus.class, tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Bad Request", response = Object.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Object.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = Object.class),
        @ApiResponse(code = 201, message = "L'oggetto è stato aggiunto correttamente nello store Il percorso dell'oggetto viene ritornato nell'header `Location` ", response = ItemStatus.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Object.class) })
    @RequestMapping(value = "/items",
        produces = { "application/problem+json", "application/json" }, 
        consumes = { "application/json" },
        method = RequestMethod.POST)
    default ResponseEntity<ItemStatus> apiPostItems(@ApiParam(value = "" ,required=true )  @Valid @RequestBody Object body) {
        return getDelegate().apiPostItems(body);
    }

}
