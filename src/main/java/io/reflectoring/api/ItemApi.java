/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reflectoring.api;

import io.reflectoring.model.Item;
import java.util.UUID;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-09-10T17:37:19.958+02:00[Europe/Berlin]")

@Validated
@Api(value = "item", description = "the item API")
public interface ItemApi {

    default ItemApiDelegate getDelegate() {
        return new ItemApiDelegate() {};
    }

    /**
     * GET /item/{uuid} : Ritorna l&#39;oggetto archiviato nello store.
     * Ritorna un l&#39;oggetto archiviato nello store insieme al timestamp di archiviazione. 
     *
     * @param uuid  (required)
     * @return Bad Request (status code 400)
     *         or Too many requests (status code 429)
     *         or Service Unavailable (status code 503)
     *         or Il server ha ritornato l&#39;oggetto.  (status code 200)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "Ritorna l'oggetto archiviato nello store.", nickname = "apiGetItem", notes = "Ritorna un l'oggetto archiviato nello store insieme al timestamp di archiviazione. ", response = Item.class, tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Bad Request", response = Object.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Object.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = Object.class),
        @ApiResponse(code = 200, message = "Il server ha ritornato l'oggetto. ", response = Item.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Object.class) })
    @RequestMapping(value = "/item/{uuid}",
        produces = { "application/problem+json", "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Item> apiGetItem(@ApiParam(value = "",required=true) @PathVariable("uuid") UUID uuid) {
        return getDelegate().apiGetItem(uuid);
    }

}
