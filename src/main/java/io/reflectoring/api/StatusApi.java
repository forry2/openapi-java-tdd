/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (4.3.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package io.reflectoring.api;

import io.reflectoring.model.Problem;
import io.swagger.annotations.*;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@javax.annotation.Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2020-09-10T17:37:19.958+02:00[Europe/Berlin]")

@Validated
@Api(value = "status", description = "the status API")
public interface StatusApi {

    default StatusApiDelegate getDelegate() {
        return new StatusApiDelegate() {};
    }

    /**
     * GET /status : Ritorna lo stato dell&#39;applicazione.
     * Ritorna lo stato dell&#39;applicazione. A scopo di test, su base randomica puo&#39; ritornare un errore. 
     *
     * @return Bad Request (status code 400)
     *         or Too many requests (status code 429)
     *         or Service Unavailable (status code 503)
     *         or Il server ha ritornato lo status. In caso di problemi ritorna sempre un problem+json.  (status code 200)
     *         or Unexpected error (status code 200)
     */
    @ApiOperation(value = "Ritorna lo stato dell'applicazione.", nickname = "apiGetStatus", notes = "Ritorna lo stato dell'applicazione. A scopo di test, su base randomica puo' ritornare un errore. ", response = Problem.class, tags={ "public", })
    @ApiResponses(value = { 
        @ApiResponse(code = 400, message = "Bad Request", response = Object.class),
        @ApiResponse(code = 429, message = "Too many requests", response = Object.class),
        @ApiResponse(code = 503, message = "Service Unavailable", response = Object.class),
        @ApiResponse(code = 200, message = "Il server ha ritornato lo status. In caso di problemi ritorna sempre un problem+json. ", response = Problem.class),
        @ApiResponse(code = 200, message = "Unexpected error", response = Object.class) })
    @RequestMapping(value = "/status",
        produces = { "application/problem+json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Problem> apiGetStatus() {
        return getDelegate().apiGetStatus();
    }

}
